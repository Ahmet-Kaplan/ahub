sort(decreasing = T) %>%
head(20) %>%
paste("\n")
shiny::runApp('~/Repos/QAF/client')
readLines('../process.log') %>%
sort(decreasing = T) %>%
head(20)
runApp('~/Repos/QAF/client')
runApp('~/Repos/QAF/client')
# Define packages
pkgs <- c('tidyverse',
#'plotly',
#'RColorBrewer',
'shiny',
'shinyjs',
'shinydashboard',
'dashboardthemes',
#'DT'
'rapiclient',
'jsonlite',
'httr'
)
# load packages
loadflag <- sapply(pkgs, require, character.only = T, quietly = T)
source('functions.R')
source('init.R')
setwd("~/Repos/QAF/client")
# Define packages
pkgs <- c('tidyverse',
#'plotly',
#'RColorBrewer',
'shiny',
'shinyjs',
'shinydashboard',
'dashboardthemes',
#'DT'
'rapiclient',
'jsonlite',
'httr'
)
# load packages
loadflag <- sapply(pkgs, require, character.only = T, quietly = T)
source('functions.R')
source('init.R')
ops_node1
plumb
plumber$new
plumber$debug_names
plumber$public_fields
plumber$public_fields()
plumber$public_methods
plumber$debug()
?plumber$debug()
?plumber$debug
?plumber
router$endpoints
router$print()
router$swaggerFile()
runApp()
# Define packages
pkgs <- c('tidyverse',
#'plotly',
#'RColorBrewer',
'shiny',
'shinyjs',
'shinydashboard',
'dashboardthemes',
#'DT'
'rapiclient',
'jsonlite',
'httr'
)
# load packages
loadflag <- sapply(pkgs, require, character.only = T, quietly = T)
source('functions.R')
source('init.R')
setwd("~/Repos/QAF/client")
# Define packages
pkgs <- c('tidyverse',
#'plotly',
#'RColorBrewer',
'shiny',
'shinyjs',
'shinydashboard',
'dashboardthemes',
#'DT'
'rapiclient',
'jsonlite',
'httr'
)
# load packages
loadflag <- sapply(pkgs, require, character.only = T, quietly = T)
source('functions.R')
source('init.R')
View(ops_node1)
readLines('../process.log')
read_file('../process.log')
loglines <- readlines('../process.log') %>%
sort(decreasing = T) %>%
head(20) %>%
paste0("\n") %>% cat
loglines <- readLines('../process.log') %>%
sort(decreasing = T) %>%
head(20) %>%
paste0("\n") %>% cat
?read_file
read_lines('../process.log')
loglines <- read_lines('../process.log') %>%
sort(decreasing = T) %>%
head(20) %>%
paste0("\n") %>% cat
read_lines('../process.log') %>%
sort(decreasing = T) %>%
head(20) %>%
erveEvent(input$logrefresh, {
loglines <- read_lines('../process.log') %>%
sort(decreasing = T) %>%
head(20)
loglines
loglines <- read_lines('../process.log') %>%
sort(decreasing = T) %>%
head(20)
loglines <- read_lines('../process.log') %>%
sort(decreasing = T) %>%
head(20)
loglines
cat(loglines)
print(loglines)
?print
runApp()
ops_node1
?renderUI
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
uiOutput("moreControls")
)
server <- function(input, output) {
output$moreControls <- renderUI({
tagList(
sliderInput("n", "N", 1, 1000, 500),
textInput("label", "Label")
)
})
}
shinyApp(ui, server)
}
tagList
?tagList
runApp()
tagList()
tagList(p(9))
box(
width = 12,
status = "primary",
title = "Node 1",
actionButton('exec_batch1', 'Run batch operation'),
actionButton('exec_thread1', 'Run thread operation'),
verbatimTextOutput('result1')
)
buttons <- tagList()
buttons
actionButton('exec_batch1', 'Run batch operation')
button[1] <- actionButton('exec_batch1', 'Run batch operation')
buttons[1] <- actionButton('exec_batch1', 'Run batch operation')
class(buttons)
buttons <- character()
buttons <- c(buttons,actionButton('exec_batch1', 'Run batch operation'))
buttons <- c(buttons,actionButton('exec_batch1', 'Run batch operation'))
buttons
print(buttons)
class(buttons)
buttons <- actionButton('exec_batch1', 'Run batch operation')
tagList(buttons)
buttons <- list(9)
buttons <- list()
buttons[1] <- actionButton('exec_batch1', 'Run batch operation')
buttons[[1]] <- actionButton('exec_batch1', 'Run batch operation')
buttons
buttons[[2]] <- actionButton('exec_batch1', 'Run batch operation')
buttons
tagList(buttons)
ops_node1
for(action in ops_node1){
}
action
names(action)
name(action)
class(action)
action()
unclass(action)
attributes(action)
runApp()
loglines
cat(loglines)
?cat
cat(loglines, fill=T)
runApp()
View(ui)
a <- future(Sys.sleep(5))
library(future)
a <- future(Sys.sleep(5))
plan(multiprocess)
a <- future(Sys.sleep(5))
a
a
a
a
a
a
a
a
k <- a
k
?future
?plan
a <- future(Sys.sleep(10))
resolved(a)
a <- future(Sys.sleep(10))
resolved(a)
resolved(a)
resolved(a)
a
a
a %...>% print()
?then
then(a, print)
then(a, print())
?future
plan(multisession)
hostname <- 192.168.137.24
hostname <- "192.168.137.24"
ops_node1 <- get_ops(host = hostname, port = 443, dir="node1", uid='test', pwd='test')
ops_node1
setwd("~/Repos/QAF")
library(rredis)
rredis::redisConnect()
?rredis
con <- rredis::redisConnect()
con
?redisConnect
con <- rredis::redisConnect(returnRef = T)
con
con <- rredis::redisConnect(returnRef = T, port=80)
con
rredis::redisConnect(returnRef = T, port=80)
con <- try(rredis::redisConnect(returnRef = T, port=80))
con
rm(con)
con <- try(rredis::redisConnect(returnRef = T, port=80))
con <- try(rredis::redisConnect(returnRef = T))
con
try(rredis::redisConnect(returnRef = T))
try(rredis::redisConnect(returnRef = T, port=80))
try(rredis::redisConnect(port=80))
rredis::redisConnect()
redisRPush('log', 'msg1')
redisRPush('log', 'msg1')
redisRPush('log', 'msg1')
redisRPush('log', 'msg1')
redisGet('log')
redisLRange('log', 1 ,-1)
# Define packages
pkgs <- c('tidyverse',
#'plotly',
#'RColorBrewer',
'shiny',
'shinyjs',
'shinydashboard',
'dashboardthemes',
#'DT'
'rapiclient',
'jsonlite',
'httr'
)
# load packages
loadflag <- sapply(pkgs, require, character.only = T, quietly = T)
source('functions.R')
source('init.R')
setwd("~/Repos/QAF/client")
# Define packages
pkgs <- c('tidyverse',
#'plotly',
#'RColorBrewer',
'shiny',
'shinyjs',
'shinydashboard',
'dashboardthemes',
#'DT'
'rapiclient',
'jsonlite',
'httr'
)
# load packages
loadflag <- sapply(pkgs, require, character.only = T, quietly = T)
source('functions.R')
source('init.R')
hostname <- ifelse(interactive(), "localhost", "nginx")
ops_node1 <- get_ops(host = hostname, port = 443, dir="node1", uid='test', pwd='test')
View(ops_node1)
ops_node1
host = hostname
port = 443
dir="node1"
uid='test'
pwd='test'
scheme <- ifelse(port == 443, 'https', 'http')
if (is.null(uid)) {
# without basic auth
swagger <- GET(url=glue::glue("{scheme}://{host}:{port}/{dir}/swagger.json")) %>% content()
} else{
# with basic auth
swagger <- GET(url=glue::glue("{scheme}://{uid}:{pwd}@{host}:{port}/{dir}/swagger.json")) %>% content()
}
swagger
install.packages("swagger")
# Define packages
pkgs <- c('tidyverse',
#'plotly',
#'RColorBrewer',
'shiny',
'shinyjs',
'shinydashboard',
'dashboardthemes',
#'DT'
'rapiclient',
'jsonlite',
'httr',
'swagger'
)
# load packages
loadflag <- sapply(pkgs, require, character.only = T, quietly = T)
swagger::swagger_index(swagger)
swagger::swagger_index()
?swagger
?`swagger-package`
?swagger_index
swagger_index
swagger_index()
swagger_path()
swagger_page <- url('https://localhost/node1/__swagger__/')
swagger_page
swagger_page %>% content()
?url
swagger_page <- swagger <- GET(url=glue::glue("{scheme}://{uid}:{pwd}@{host}:{port}/{dir}/__swagger__/")) %>% content()
swagger_page
?content
swagger_page <- swagger <- GET(url=glue::glue("{scheme}://{uid}:{pwd}@{host}:{port}/{dir}/__swagger__/")) %>% content(as = "raw")
swagger_page
swagger_page <- swagger <- GET(url=glue::glue("{scheme}://{uid}:{pwd}@{host}:{port}/{dir}/__swagger__/")) %>% content(as = "text")
swagger_page
get_ops <-
function(host = 'localhost',
port = '80',
dir = 'node1',
uid = NULL,
pwd = NULL) {
scheme <- ifelse(port == 443, 'https', 'http')
if (is.null(uid)) {
# without basic auth
swagger <- GET(url=glue::glue("{scheme}://{host}:{port}/{dir}/swagger.json")) %>% content()
swagger_page <- GET(url=glue::glue("{scheme}://{host}:{port}/{dir}/__swagger__/")) %>% content(as = "text")
} else{
# with basic auth
swagger <- GET(url=glue::glue("{scheme}://{uid}:{pwd}@{host}:{port}/{dir}/swagger.json")) %>% content()
swagger_page <- swagger <- GET(url=glue::glue("{scheme}://{uid}:{pwd}@{host}:{port}/{dir}/__swagger__/")) %>% content(as = "text")
}
# exchange hostname and paths in swagger definition
swagger$host <- paste0(host, ":", port)
names(swagger$paths) <- paste0('/', dir, names(swagger$paths))
swagger$schemes <- list(scheme)
# get api definition from swagger
api <- get_api(toJSON(swagger))
# extract valid operations
ops <- get_operations(api,
.headers = c("Authorization" = paste(
"Basic", glue::glue("{uid}:{pwd}") %>% base64_enc()
)))
return(list(api = api,
ops = ops,
swagger= swagger,
swagger_page = swagger_page))
}
ops_node1 <- get_ops(host = hostname, port = 443, dir="node1", uid='test', pwd='test')
# with basic auth
swagger <- GET(url=glue::glue("{scheme}://{uid}:{pwd}@{host}:{port}/{dir}/swagger.json")) %>% content()
swagger_page <- swagger <- GET(url=glue::glue("{scheme}://{uid}:{pwd}@{host}:{port}/{dir}/__swagger__/")) %>% content(as = "text")
# exchange hostname and paths in swagger definition
swagger$host <- paste0(host, ":", port)
swagger
# with basic auth
swagger <- GET(url=glue::glue("{scheme}://{uid}:{pwd}@{host}:{port}/{dir}/swagger.json")) %>% content()
swagger
swagger_page <- swagger <- GET(url=glue::glue("{scheme}://{uid}:{pwd}@{host}:{port}/{dir}/__swagger__/")) %>% content(as = "text")
swagger_page <- GET(url=glue::glue("{scheme}://{uid}:{pwd}@{host}:{port}/{dir}/__swagger__/")) %>% content(as = "text")
source('~/Repos/QAF/client/functions.R', echo=TRUE)
ops_node1 <- get_ops(host = hostname, port = 443, dir="node1", uid='test', pwd='test')
ops_node2 <- get_ops(host = hostname, port = 443, dir="node2", uid='test', pwd='test')
ops_node1
runApp()
node1 <- get_api(host = hostname, port = 443, dir="node1", uid='test', pwd='test')
scheme <- ifelse(port == 443, 'https', 'http')
scheme
# without basic auth
swagger <- GET(url=glue::glue("{scheme}://{host}:{port}/{dir}/swagger.json")) %>% content()
swagger
# with basic auth
swagger <- GET(url=glue::glue("{scheme}://{uid}:{pwd}@{host}:{port}/{dir}/swagger.json")) %>% content()
swagger_page <- GET(url=glue::glue("{scheme}://{uid}:{pwd}@{host}:{port}/{dir}/__swagger__/")) %>% content(as = "text")
swagger
# exchange hostname and paths in swagger definition
swagger$host <- paste0(host, ":", port)
names(swagger$paths) <- paste0('/', dir, names(swagger$paths))
swagger$schemes <- list(scheme)
runApp()
?tabbox
?tabbox
#devtools::install_github("nik01010/dashboardthemes")
# Define packages
pkgs <- c('tidyverse',
#'plotly',
#'RColorBrewer',
'shiny',
'shinyjs',
'shinydashboard',
'dashboardthemes',
#'DT'
'rapiclient',
'jsonlite',
'httr',
'swagger'
)
# load packages
loadflag <- sapply(pkgs, require, character.only = T, quietly = T)
source('functions.R')
source('init.R')
?tabbBox
?tabBox
runApp()
runApp()
runApp()
runApp()
renderUI({
if(apis_fetched){
node1$swagger_page
}
})
?renderUI
includeHTML(node1$swagger_page)
?includeHTML
includeHTML()
includeHTML
HTML(node1$swagger_page)
runApp()
HTML(node1$swagger_page)
runApp()
shiny::runApp('client')
node1$swagger_page
HTML(node1$swagger_page)
HTML(node1$swagger_page) %>% class
setwd("~/Repos/QAF/client")
?file.show
write_file(HTML(node1$swagger_page), 'test.html')
browseURL('test.html')
node1
?a
errmsg <- try({
node1 <- get_node_api(host = hostname, port = 443, dir="node1", uid='test', pwd='test')
node2 <- get_node_api(host = hostname, port = 443, dir="node2", uid='test', pwd='test')
}, silent=T)
source('~/Repos/QAF/client/functions.R', echo=TRUE)
errmsg <- try({
node1 <- get_node_api(host = hostname, port = 443, dir="node1", uid='test', pwd='test')
node2 <- get_node_api(host = hostname, port = 443, dir="node2", uid='test', pwd='test')
}, silent=T)
swagger_url
node1$swagger_url
runApp()
runApp()
runApp()
runApp()
node1$swagger_url
runApp()
a(href = node1$swagger_url, target="_blank", 'Goto to Swagger UI (new tab)')
runApp()
runApp()
node1 <- get_node_api(host = hostname, port = 443, dir="node1", uid='test', pwd='test')
node2 <- get_node_api(host = hostname, port = 443, dir="node2", uid='test', pwd='test')
# with basic auth
swagger <- GET(url=glue::glue("{scheme}://{uid}:{pwd}@{host}:{port}/{dir}/swagger.json")) %>% content()
scheme <- ifelse(port == 443, 'https', 'http')
host = hostname
port = 443
dir="node2"
uid='test'
pwd='test'
# with basic auth
swagger <- GET(url=glue::glue("{scheme}://{uid}:{pwd}@{host}:{port}/{dir}/swagger.json")) %>% content()
scheme <- ifelse(port == 443, 'https', 'http')
# without basic auth
swagger <- GET(url=glue::glue("{scheme}://{host}:{port}/{dir}/swagger.json")) %>% content()
swagger
# with basic auth
swagger <- GET(url=glue::glue("{scheme}://{uid}:{pwd}@{host}:{port}/{dir}/swagger.json")) %>% content()
# with basic auth
swagger <- GET(url=glue::glue("{scheme}://{uid}:{pwd}@{host}:{port}/{dir}/swagger.json")) %>% content()
runApp()
hostname <- ifelse(interactive(), "localhost", "nginx")
node1 <- get_node_api(host = hostname, port = 443, dir="node1", uid='test', pwd='test')
node1
getwd()
runApp()
