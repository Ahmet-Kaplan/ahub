)
# load packages
loadflag <- sapply(pkgs, require, character.only = T, quietly = T)
shinyUI(
dashboardPage(header, sidebar, body)
)
runApp('~/Repos/QAF/client')
setwd("~/Repos/QAF/test")
setwd("~/Repos/QAF/client")
runApp()
runApp()
# Define packages
pkgs <- c('tidyverse',
#'plotly',
#'RColorBrewer',
'shiny',
'shinyjs',
'shinydashboard',
'dashboardthemes',
#'DT'
'rapiclient',
'jsonlite'
)
# load packages
loadflag <- sapply(pkgs, require, character.only = T, quietly = T)
swagger <- read_json("http://localhost:8001/swagger.json")
swagger
swagger$host <- "127.0.0.1:8001"
api <- get_api(toJSON(swagger))
operations <- get_operations(api)
schemas <- get_schemas(api)
glue()
get_ops <- function(host ='localhost', port='8001'){
swagger <- read_json(paste0("http://",host,":",port,"/swagger.json"))
swagger$host <- paste0(host,":", port)
api <- get_api(toJSON(swagger))
get_operations(api)
}
get_ops()
ops <- get_ops()
ops$`_execute`()
ops$`_execute`()
ops$`_execute`()
class(ops)
ops[1]
op1 <- ops[[1]]
op1()
ops_node1 <- get_ops(port = 8001)
ops_node2 <- get_ops(port = 8002)
ops_node1[[1]]
response <- ops_node1[[1]]()
response
response$content
httr::content(response)
runApp()
logcontent <- read_file('../process.log')
logcontent
runApp()
print(logcontent)
cat(logcontent)
runApp()
setwd("~/Repos/QAF/node")
source('~/Repos/QAF/node/startapi.R', echo=TRUE)
file.remove('running') # remove running file
# wrap up
flog.info('PID %s on Node %s: Process finished', pid)
source('~/Repos/QAF/node/startapi.R', echo=TRUE)
runApp('~/Repos/QAF/client')
setwd("~/Repos/QAF/node")
readLines(con = file("requirements.txt"))
readLines(con = file("requirements.txt"))
?readLines
readLines(con = file("requirements.txt"))
pkgs <- readLines(con = file("requirements.txt"))
?file
pkgs <- readLines("requirements.txt")
pkgs
sapply(pkgs, require, character.only=T)
sapply(pkgs, require, character.only=T)
source('~/Repos/QAF/node/startapi.R', echo=TRUE)
install.packages("rredis")
pkgs <- readLines("requirements.txt")
sapply(pkgs, require, character.only=T)
rredis::redisConnect()
?rredis::redisConnect
?rredis::redisConnect(returnRef=T)
rredis::redisConnect(returnRef=T)
redisSet('x',runif(5))
redisGet('x')
redisClose()
ops_node1 <- get_ops(host="localhost", port = 8001)
# Define packages
pkgs <- c('tidyverse',
#'plotly',
#'RColorBrewer',
'shiny',
'shinyjs',
'shinydashboard',
'dashboardthemes',
#'DT'
'rapiclient',
'jsonlite'
)
# load packages
loadflag <- sapply(pkgs, require, character.only = T, quietly = T)
ops_node1 <- get_ops(host="localhost", port = 8001)
source('functions.R')
setwd("~/Repos/QAF/client")
source('functions.R')
ops_node1 <- get_ops(host="localhost", port = 8001)
read_json
?read_json
?url
get_ops <- function(host ='localhost', port='8001', uid, pwd){
swagger <- read_json(glue::glue("http://{uid]:{pwd}@{host}:{port}/swagger.json"))
swagger$host <- paste0(host,":", port)
api <- get_api(toJSON(swagger))
get_operations(api)
}
ops_node1 <- get_ops(host="localhost", port = 8001, 'test', 'test')
host ='localhost'
port='8001'
uid <- test
uid <- 'test'
pwd <- 'test'
glue::glue("http://{uid]:{pwd}@{host}:{port}/swagger.json")
glue::glue("lol{uid}")
glue::glue("http://{uid]:{pwd}@{host}:{port}/swagger.json")
glue::glue("http://{uid}:{pwd}@{host}:{port}/swagger.json")
get_ops <- function(host ='localhost', port='8001', uid, pwd){
swagger <- read_json(glue::glue("http://{uid}:{pwd}@{host}:{port}/swagger.json"))
swagger$host <- paste0(host,":", port)
api <- get_api(toJSON(swagger))
get_operations(api)
}
ops_node1 <- get_ops(host="localhost", port = 8001, 'test', 'test')
?tryCatch
ops_fetched <- T
tryCatch({
ops_node1 <- get_ops(host = "localhost", port = 8001, 'test', 'test')
ops_node2 <- get_ops(host = "nginx", port = 8002, 'test', 'test')
}, finally = {
ops_fetched <- F
}}
tryCatch({
ops_node1 <- get_ops(host = "localhost", port = 8001, 'test', 'test')
ops_node2 <- get_ops(host = "nginx", port = 8002, 'test', 'test')
}, finally = {
ops_fetched <- F
})
ops_fetched
err <- tryCatch({
ops_node1 <- get_ops(host = "localhost", port = 8001, 'test', 'test')
ops_node2 <- get_ops(host = "nginx", port = 8002, 'test', 'test')
}, finally = {
ops_fetched <- F
})
err
ops_node1 <- get_ops(host = "localhost", port = 8001, 'test', 'test')
ops_node2 <- get_ops(host = "nginx", port = 8002, 'test', 'test')
?try
err <- try({
ops_node1 <- get_ops(host = "localhost", port = 8001, 'test', 'test')
ops_node2 <- get_ops(host = "nginx", port = 8002, 'test', 'test')
TRUE
})
err
err <- try({
ops_node1 <- get_ops(host = "localhost", port = 8001, 'test', 'test')
ops_node2 <- get_ops(host = "nginx", port = 8002, 'test', 'test')
TRUE
}, silent=T)
err
err <- try({
ops_node1 <- get_ops(host = "localhost", port = 8001, 'test', 'test')
ops_node2 <- get_ops(host = "nginx", port = 8002)
TRUE
}, silent=T)
err
get_ops <- function(host ='localhost', port='8001', uid=NULL, pwd=NULL){
if(is.null(uid)){
swagger <- read_json(glue::glue("http://{host}:{port}/swagger.json"))
}else{
swagger <- read_json(glue::glue("http://{uid}:{pwd}@{host}:{port}/swagger.json"))
}
swagger$host <- paste0(host,":", port)
api <- get_api(toJSON(swagger))
get_operations(api)
}
err <- try({
ops_node1 <- get_ops(host = "localhost", port = 8001, 'test', 'test')
ops_node2 <- get_ops(host = "nginx", port = 8002)
TRUE
}, silent=T)
uid=NULL
pwd=NULL
swagger <- read_json(glue::glue("http://{host}:{port}/swagger.json"))
swagger
swagger$host <- paste0(host,":", port)
api <- get_api(toJSON(swagger))
err <- try({
ops_node1 <- get_ops(host = "localhost", port = 8001, 'test', 'test')
ops_node2 <- get_ops(host = "localhost", port = 8002)
TRUE
}, silent=T)
if(!inherits(err, "try-error")) ops_fetched <- T
ops_fetched
ops_fetched <- F
err <- try({
ops_node1 <- get_ops(host = "nginx", port = 8001, 'test', 'test')
ops_node2 <- get_ops(host = "nginx", port = 8002)
TRUE
}, silent=T)
ops_fetched <- ifelse(!inherits(err, "try-error"), T, F)
ops_fetched
interactive()
hostname <- ifelse(interactive(), "localhost", "nginx")
err <- try({
ops_node1 <- get_ops(host = hostname, port = 8001, 'test', 'test')
ops_node2 <- get_ops(host = hostname, port = 8002)
TRUE
}, silent=T)
ops_fetched <- ifelse(!inherits(err, "try-error"), T, F)
ops_fetched
httr::with_verbose(
ops_node1 <- get_ops(host = hostname, port = 8001, 'test', 'test'))
uid <- "test"
pwd <- "test"
host ='localhost'
port='8001'
httr::with_verbise(read_json(glue::glue("http://{uid}:{pwd}@{host}:{port}/swagger.json"))    )
httr::with_verbose(read_json(glue::glue("http://{uid}:{pwd}@{host}:{port}/swagger.json"))    )
httr::with_verbose(get_operations(api))
?httr::with_verbose
ops_node1 <- get_ops(host = hostname, port = 8001, 'test', 'test')
httr::with_verbose(ops_node1$`_execute`())
base64_enc('test:test')
glue::glue({uid}:{pwd})
uid
pwd
glue::glue({uid}:{pwd})
glue::glue("{uid}:{pwd}")
glue::glue("{uid}:{pwd}") %>% base64_enc()
api <-
get_api(toJSON(swagger),
.headers = c("Authorization" = paste("Basic", glue::glue("{uid}:{pwd}") %>% base64_enc())))
get_operations(api,
.headers = c("Authorization" = paste(
"Basic", glue::glue("{uid}:{pwd}") %>% base64_enc()
)))
get_operations(api,
.headers = c("Authorization" = paste(
"Basic", glue::glue("{uid}:{pwd}") %>% base64_enc()
)))
get_ops <-
function(host = 'localhost',
port = '8001',
uid = NULL,
pwd = NULL) {
if (is.null(uid)) {
swagger <-
read_json(glue::glue("http://{host}:{port}/swagger.json"))
} else{
swagger <-
read_json(glue::glue("http://{uid}:{pwd}@{host}:{port}/swagger.json"))
}
swagger$host <- paste0(host, ":", port)
api <- get_api(toJSON(swagger))
get_operations(api,
.headers = c("Authorization" = paste(
"Basic", glue::glue("{uid}:{pwd}") %>% base64_enc()
)))
}
ops_node1 <- get_ops(host = hostname, port = 8001, 'test', 'test')
httr::with_verbose(ops_node1$`_execute`())
ops_node2 <- get_ops(host = hostname, port = 8002)
httr::with_verbose(ops_node2$`_execute`())
httr::with_verbose(ops_node1$`_execute`())
errmsg <- try({
ops_node1 <- get_ops(host = hostname, port = 8001, 'test', 'test')
ops_node2 <- get_ops(host = hostname, port = 8002)
}, silent=T)
errmsg
?try
errmsg <- try({
ops_node1 <- get_ops(host = hostname, port = 8001, 'test', 'test')
ops_node2 <- get_ops(host = "hostname", port = 8002)
}, silent=T)
errmsg
errmsg[1]
cat(errmsg[1])
runApp()
errmsg <- try({
ops_node1 <- get_ops(host = hostname, port = 8001, 'test', 'test')
ops_node2 <- get_ops(host = "hostname", port = 8002)
}, silent=T)
ops_fetched <- ifelse(!inherits(err, "try-error"), T, F)
ops_fetched
ops_fetched <- ifelse(!inherits(errmsg, "try-error"), T, F)
ops_fetched
runApp()
ops_node2 <- get_ops(host = hostname, port = 8002)
runApp()
dir = 'node1'
swagger <-
read_json(glue::glue("http://{host}:{port}/{dir}/swagger.json"))
host = 'localhost'
port = '80'
swagger <-
read_json(glue::glue("http://{host}:{port}/{dir}/swagger.json"))
swagger
swagger$host <- paste0(host, ":", port)
swagger
get_ops <-
function(host = 'localhost',
port = '80',
dir = 'node1',
uid = NULL,
pwd = NULL) {
if (is.null(uid)) {
swagger <-
read_json(glue::glue("http://{host}:{port}/{dir}/swagger.json"))
} else{
swagger <-
read_json(glue::glue("http://{uid}:{pwd}@{host}:{port}/swagger.json"))
}
swagger$host <- paste0(host, ":", port)
api <- get_api(toJSON(swagger))
get_operations(api,
.headers = c("Authorization" = paste(
"Basic", glue::glue("{uid}:{pwd}") %>% base64_enc()
)))
}
hostname <- ifelse(interactive(), "localhost", "nginx")
ops_node1 <- get_ops(host = hostname, port = 80, dir="node1")
ops_node1
httr::with_verbose(ops_node1$`_execute`())
swagger
paths
swagger$paths
swagger$paths %>% names
paste0('/', dir, names(swagger$paths))
names(swagger$paths) <- paste0('/', dir, names(swagger$paths))
api <- get_api(toJSON(swagger))
get_ops <-
function(host = 'localhost',
port = '80',
dir = 'node1',
uid = NULL,
pwd = NULL) {
if (is.null(uid)) {
swagger <-
read_json(glue::glue("http://{host}:{port}/{dir}/swagger.json"))
} else{
swagger <-
read_json(glue::glue("http://{uid}:{pwd}@{host}:{port}/swagger.json"))
}
swagger$host <- paste0(host, ":", port)
names(swagger$paths) <- paste0('/', dir, names(swagger$paths))
api <- get_api(toJSON(swagger))
get_operations(api,
.headers = c("Authorization" = paste(
"Basic", glue::glue("{uid}:{pwd}") %>% base64_enc()
)))
}
ops_node1 <- get_ops(host = hostname, port = 80, dir="node1")
httr::with_verbose(ops_node1$`_execute`())
runApp()
ops_node1 <- get_ops(host = hostname, port = 80, dir="node1", uid='test', pwd='test')
get_ops <-
function(host = 'localhost',
port = '80',
dir = 'node1',
uid = NULL,
pwd = NULL) {
if (is.null(uid)) {
# without basic auth
swagger <-
read_json(glue::glue("http://{host}:{port}/{dir}/swagger.json"))
} else{
# with basic auth
swagger <-
read_json(glue::glue("http://{uid}:{pwd}@{host}:{port}/{dir}/swagger.json"))
}
# exchange hostname and paths in swagger definition
swagger$host <- paste0(host, ":", port)
names(swagger$paths) <- paste0('/', dir, names(swagger$paths))
# get api definition from swagger
api <- get_api(toJSON(swagger))
# extract valid operations
get_operations(api,
.headers = c("Authorization" = paste(
"Basic", glue::glue("{uid}:{pwd}") %>% base64_enc()
)))
}
runApp()
runApp()
hostname <- ifelse(interactive(), "localhost", "nginx")
ops_node1 <- get_ops(host = hostname, port = 443, dir="node1", uid='test', pwd='test')
source('~/Repos/QAF/client/functions.R', echo=TRUE)
ops_node1 <- get_ops(host = hostname, port = 443, dir="node1", uid='test', pwd='test')
protocol <- ifelse(port == 443, 'https', 'http')
port <- 443
port = 443
dir="node1"
uid='test'
pwd='test'
protocol <- ifelse(port == 443, 'https', 'http')
protocol
glue::glue("{protocol}://{host}:{port}/{dir}/swagger.json")
# without basic auth
swagger <-
read_json(glue::glue("{protocol}://{host}:{port}/{dir}/swagger.json"))
?read_json
httr::set_config(config(ssl_verifypeer = 0L))
library(httr)
httr::set_config(config(ssl_verifypeer = 0L))
# ignore certificate
set_config(config(ssl_verifypeer = 0L))
hostname <- ifelse(interactive(), "localhost", "nginx")
ops_node1 <- get_ops(host = hostname, port = 443, dir="node1", uid='test', pwd='test')
# without basic auth
swagger <-
read_json(glue::glue("{protocol}://{host}:{port}/{dir}/swagger.json"))
# without basic auth
swagger <-
read_json(GET(glue::glue("{protocol}://{host}:{port}/{dir}/swagger.json")))
GET
glue::glue("{protocol}://{host}:{port}/{dir}/swagger.json")
GET(url=glue::glue("{protocol}://{host}:{port}/{dir}/swagger.json"))
GET(url=glue::glue("{protocol}://{host}:{port}/{dir}/swagger.json")) %>% content()
GET(url=glue::glue("{protocol}://{uid}:{pwd}@{host}:{port}/{dir}/swagger.json")) %>% content()
GET(url=glue::glue("{protocol}://{uid}:{pwd}@{host}:{port}/{dir}/swagger.json")) %>% content() %>% read_json()
GET(url=glue::glue("{protocol}://{uid}:{pwd}@{host}:{port}/{dir}/swagger.json")) %>% content()
swagger <- GET(url=glue::glue("{protocol}://{uid}:{pwd}@{host}:{port}/{dir}/swagger.json")) %>% content()
# get api definition from swagger
api <- get_api(toJSON(swagger))
httr::authenticate(uid, pwd)
GET
?GET
# without basic auth
swagger <- GET(url=glue::glue("{protocol}://{host}:{port}/{dir}/swagger.json")) %>% content()
# with basic auth
swagger <- GET(url=glue::glue("{protocol}://{uid}:{pwd}@{host}:{port}/{dir}/swagger.json")) %>% content()
swagger
source('~/Repos/QAF/client/functions.R', echo=TRUE)
ops_node1 <- get_ops(host = hostname, port = 443, dir="node1", uid='test', pwd='test')
ops_node1
httr::with_verbose(ops_node1$`_execute`())
swagger
swagger$schemes <- list(scheme)
scheme <- ifelse(port == 443, 'https', 'http')
swagger$schemes <- list(scheme)
swagger
source('~/Repos/QAF/client/functions.R', echo=TRUE)
ops_node1 <- get_ops(host = hostname, port = 443, dir="node1", uid='test', pwd='test')
ops_node2 <- get_ops(host = hostname, port = 443, dir="node2", uid='test', pwd='test')
httr::with_verbose(ops_node1$`_execute`())
httr::with_verbose(ops_node1$`_execute`() %>% content()
httr::with_verbose(ops_node1$`_execute`() %>% content())
swagger
# exchange hostname and paths in swagger definition
swagger$host <- paste0(host, ":", port)
swagger
runApp()
hostname <- ifelse(interactive(), "localhost", "nginx")
errmsg <- try({
ops_node1 <- get_ops(host = hostname, port = 443, dir="node1", uid='test', pwd='test')
ops_node2 <- get_ops(host = hostname, port = 443, dir="node2", uid='test', pwd='test')
}, silent=T)
# ignore certificate
set_config(config(ssl_verifypeer = 0L))
hostname <- ifelse(interactive(), "localhost", "nginx")
errmsg <- try({
ops_node1 <- get_ops(host = hostname, port = 443, dir="node1", uid='test', pwd='test')
ops_node2 <- get_ops(host = hostname, port = 443, dir="node2", uid='test', pwd='test')
}, silent=T)
errmsg
ops_node1 <- get_ops(host = hostname, port = 443, dir="node1", uid='test', pwd='test')
ops_node1
# Define packages
pkgs <- c('tidyverse',
#'plotly',
#'RColorBrewer',
'shiny',
'shinyjs',
'shinydashboard',
'dashboardthemes',
#'DT'
'rapiclient',
'jsonlite',
'httr'
)
# load packages
loadflag <- sapply(pkgs, require, character.only = T, quietly = T)
ops_node1 <- get_ops(host = hostname, port = 443, dir="node1", uid='test', pwd='test')
ops_node1
httr::config
?httr::config
httr_options()
httr_options()$httr
httr_options()$httr %>% grep("ssl_verify")
httr_options()$httr %>% str_detect("ssl_verify")
httr_options()$httr %>% str_extract("ssl_verify")
httr_options()$httr %>% str_match_all("ssl_verify")
httr_options()$httr %>% str_match("ssl_verify")
httr_options()$httr %>% str_detect("ssl_verify")
httr_options()$httr %>% str_detect("ssl_verify") -> ind
httr_options()$httr[ind]
# ignore certificate
set_config(config(ssl_verifypeer = 0L, ssl_verifyhost=0L))
ops_node1 <- get_ops(host = hostname, port = 443, dir="node1", uid='test', pwd='test')
