install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
install.packages("rstudioapi")
rstudioapi::isAvailable("0.99.149")
library(devtools)
has_devel()
has_devel()
?has_devel
check_devel()
has_compiler()
pkgbuild::check_build_tools()
pkgbuild::check_build_tools()
library(ahubr)
checkboss()
library(ahubr)
checkboss()
library(roxygen2)
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
library(ahubr)
checkboss()
nginxhost
library(ahubr)
checkboss()
base64enc()
roxygenise()
checkboss()
roxygenise()
library(ahubr)
checkbos()
checkboss()
checkboss
#' Title
#'
#' @param host
#'
#' @return
#' @export
#'
#' @examples
checkboss <-
function(host = ifelse(interactive(), 'ahub.westeurope.cloudapp.azure.com' , 'nginx')) {
port <- 8000
boss_api <- get_node_api('boss', host = host, port = port)
return(boss_api)
}
checkboss()
library(rredis)
?assign
.lol <- 2
search()
?"::"
?":::"
?"."
.lol
ls(all.names = T)
ls()
?assign
boss_api
boss_api <- get_node_api('boss', host = host, port = port)
host = "lol"
port = 8000
boss_api <- get_node_api('boss', host = host, port = port)
boss_api
?GET
roxygenise()
library(ahubr)
init_boss_api()
?environment
environment()
environment("ahub")
environment("ahubr")
environment("package:ahubr")
environment("init_boss_api")
search()
env.profile("package:ahubr")
get("package:ahubr")
?"<<-"
as.environment("package:ahubr")
library(ahubr)
ahubr:::.__NAMESPACE__.
ahubr:::.__NAMESPACE__.$lazydata
ahubr:::.__NAMESPACE__.$path
ahubr:::.__NAMESPACE__.$spec
ahubr:::.onLoad()
parent.frame()
ls(all.names = T)
init_boss_api()
.ahubEnv$current
rredis:::.redisEnv
rredis:::.redisEnv$current
rredis:::.openConnection()
rredis:::.openConnection
.ahubEnv
library(ahubr)
environment(init_boss_api)
environment(init_boss_api) %>% parent.env()
parent.env(environment(init_boss_api))
parent.env(parent.env(environment(init_boss_api)))
parent.env(parent.env(parent.env(environment(init_boss_api))))
init_boss_api()
.ahubEnv
boss_api <- get(boss_api, envir = .ahubEnv$current)
get("boss_api")
init_boss_api()
library(ahubr)
.ahubEnv
ls(all.names = T)
.ahubEnv
ls(all.names = T)
library(ahubr)
ls(all.names = T)
ls(all.names = T)
library(ahubr)
env = parent.frame()
print(env)
get(".ahubEnv")
search()
?get
get("summary")
get("get_node_api")
library(ahubr)
get("current")
init_boss_api()
ls(all.names = T)
library(ahubr)
ls(all.names = T)
init_boss_api
init_boss_api()
library(ahubr)
test <- init_boss_api()
test
parent.env(test)
parent.env(parent.env(test))
ahubr:::.ahubEnv
get("boss_api", envir = ahubr:::.ahubEnv$current)
boss_api <- get("boss_api", envir = ahubr:::.ahubEnv$current)
boss_api$swagger_url
library(ahubr)
init_boss_api()
status <- boss_api$ops$get_redis_status()
status
status <- content(boss_api$ops$get_redis_status())
library(httr)
status <- content(boss_api$ops$get_redis_status())
status
library(ahubr)
check_redis
check_redis
roxygenise()
library(ahubr)
library(ahubr)
check_redis()
library(ahubr)
library(ahubr)
check_redis()
init_boss_api()
check_redis()
library(ahubr)
check_redis()
init_boss_api()
check_redis()
ahubr:::.ahubEnv$bossinit
ahubr:::.ahubEnv$boss_init
library(ahubr)
library(ahubr)
check_redis()
library(ahubr)
check_redis()
library(ahubr)
ahubr:::test
get('test')
test
get("test", envir = as.environment("package:ahubr"))
ahubr:::test
environment(ahubr:::test)
?break()
?break
?exit
redisConnect()
?redisConnect
library(ahubr)
roxygenise()
library(ahubr)
connect_redis()
library(ahubr)
connect_redis()
ahubr:::.ahubEnv$boss_api$ops$pid_log()
content(ahubr:::.ahubEnv$boss_api$ops$pid_log())
?flog.error
flog.namespace()
flog.logger()
library(futile.logger)
flog.namespace()
flog.logger()
#' Custom appender for futile.logger to write directly to ahub boss
#'
#' @param pid
#'
#' @return
#' @export
#'
#' @examples
appender.boss <- function(pid=NULL){
function(line){
if(!is.null(pid)){
line <- line %>%
sub('(\\[.+\\])', glue::glue('\\1 PID {pid}:'), .) %>%
sub('\n', '', .)
ahubr:::.ahubEnv$boss_api$ops$pid_log(pid, charToRaw(line))
}else{
cat('No log written, please provide PID.')
}
}
}
flog.appender(appender.boss(pid))
library(ahubr)
library(ahubr)
library(futile.logger)
init_boss_api()
library(ahubr)
init_boss_api()
ahubr:::.ahubEnv$boss_api$ops$pid_log()
ahubr:::.ahubEnv$boss_api$ops$pid_log
library(ahubr)
library(ahubr)
init_boss_api()
init_boss_api()
library(ahubr)
init_boss_api()
init_boss_api()
init_boss_api()
init_boss_api()
init_boss_api()
library(ahubr)
roxygen2::roxygenise()
library(ahubr)
bosslog()
library(ahubr)
bosslog()
bosslog(1001, 'lol')
#process_name <- 'batch' # this name is crucial for process logging and status checking
bossops <- ahubr:::.ahubEnv$boss_api$ops
bossops
#process_name <- 'batch' # this name is crucial for process logging and status checking
boss <- ahubr:::.ahubEnv$boss_api$ops
boss$get_pid
boss$get_pid("batch")
library(ahubr)
init_boss_api()
#process_name <- 'batch' # this name is crucial for process logging and status checking
boss <- ahubr:::.ahubEnv$boss_api$ops
boss$get_pid('batch')
content(boss$get_pid('batch'))
httr::content(boss$get_pid('batch'))
httr::content(boss$get_pid('batch'))$pid
httr::content(ahubr:::.ahubEnv$boss_api$ops$get_pid('batch'))$pid
httr::content(.ahubEnv$boss_api$ops$get_pid('batch'))$pid
httr::content(ahubr:::.ahubEnv$boss_api$ops$get_pid_info(1001))
#debug
boss <- ahubr:::.ahubEnv$boss_api$ops
boss$create_pid
boss$set_pid_status()
boss$set_pid_status
boss$get_pid_log
roxygen2::roxygenise()
library(ahubr)
dummy <- function(t = 1){
Sys.sleep(t)
}
as_batch_function(dummy)
test <- as_batch_function(dummy)
test(1)
test <- as_batch_function(dummy, "test")
test(1)
roxygen2::roxygenise()
library(ahubr)
test <- as_batch_function(dummy, "test")
test(1)
?plan
library(future)
plan
plan(multisession())
plan(multisession
plan(multisession)
library(ahubr)
test <- as_batch_function(dummy, "test")
test(1)
as.numeric(TRUE)
as.numeric(FALSE)
test
test(t=1)
test(t=1)
test(t=1)
set_pid_status
roxygen2::roxygenise()
roxygen2::roxygenise()
?get_pid_log
library(ahubr)
fun <- dummy
force = F
process_name <- "test"
pid <- get_pid(process_name) # get the last process id for this process
pid
pid <- get_pid(process_name) # get the last process id for this process
pid
pid_info <- get_pid_info(pid) # get the info to the pid
pid_info
# has the process already finished today
run_today <-
pid_info$time %>% substr(1, 8) %>% lubridate::ymd() == Sys.Date() &
pid_info$status == 'finished'
library(dplyr)
# has the process already finished today
run_today <-
pid_info$time %>% substr(1, 8) %>% lubridate::ymd() == Sys.Date() &
pid_info$status == 'finished'
run_today
!run_today | as.numeric(force)
pid_info$status != 'running' & init_future()
pid_info$status != 'init'
pid <- create_pid(process_name)
pid
pid_info$status
pid_info$status != 'init'
result %<-% {
# init logging
pid_log(pid, glue('Process {process_name} started.'))
set_pid_status(pid, 'running')
# do some stuff ##################
fun(...)
##################################
# wrap up
pid_log(pid, glue('Process {process_name} finished'))
set_pid_status(pid, 'finished')
return(TRUE)
}
fun
pid_log()
set_pid_status
pid_log
set_pid_status
result %<-% {
# init logging
pid_log(pid, glue('Process {process_name} started.'))
set_pid_status(pid, 'running')
# do some stuff ##################
fun(...)
##################################
# wrap up
pid_log(pid, glue('Process {process_name} finished'))
set_pid_status(pid, 'finished')
return(TRUE)
}
result %<-% {
# init logging
pid_log(pid, glue('Process {process_name} started.'))
set_pid_status(pid, 'running')
# do some stuff ##################
fun(t=1)
##################################
# wrap up
pid_log(pid, glue('Process {process_name} finished'))
set_pid_status(pid, 'finished')
return(TRUE)
}
result
?future
library(ahubr)
test <- as_batch_function(dummy, "test2")
test(t=1)
test
test(force=F, t =1)
test(force=F, t =1)
test(force=F, t =1)
test(force=F, t =1)
test(force=F, t =1)
library(ahubr)
test <- as_batch_function(dummy, "test3")
test(force=F, t = 1)
test(force=F, t = 1)
parent.frame()
parent.frame() %>% print()
summary(parent.frame())
?environment
env.profile(parent.frame())
environmentName(parent.frame())
flog.info(environmentName(parent.frame()))
library(futile.logger)
flog.info(environmentName(parent.frame()))
library(ahubr)
test <- as_batch_function(dummy, "test3")
test(F, .1)
?future
parent.frame(ahubr:::.ahubEnv)
ahubr:::.ahubEnv
ahubr:::.ahubEnv %>%
environmentName()
ahubr:::.ahubEnv %>% parent.frame()
ahubr:::.ahubEnv %>% parent.env()
?new.env
as.environment("namespace:ahubr")
ahubr:::.ahubEnv %>% parent.env() %>% environmentName()
as.environment("ahubr")
ahubr:::.ahubEnv %>% parent.env() %>% parent.env()
ahubr:::.ahubEnv %>% parent.env() %>% parent.env() %>% environmentName()
ahubr:::.ahubEnv %>% parent.env() %>% parent.env() %>% class()
ahubr:::.ahubEnv %>% parent.env() %>% parent.env() %>% typeof(9)
ahubr:::.ahubEnv %>% parent.env() %>% parent.env() %>% typeof()
?future
library(ahubr)
test <- as_batch_function(dummy, "test3")
test(0,1)
test(1,1)
test(0,1)
test(0,1)
test(0,1)
test(0,1)
